errorHandler = angular.module "errorHandler", ["appConfig", "connectivity", "mtnUtils"]

errorHandler.factory("$exceptionHandler", ($window, $log) ->
  return (exception) ->
    if $window.Raven? && $window.appEnvironment.sentry.enabled
      $window.Raven.captureException(
        exception,
        {
          tags: { category: "Console" }
        }
      )

    $log.error(exception)
)

errorHandler.service "errorHandlerService", (appConfig, sessionService, connectivity, $window, $log, $analytics, deviceUtils) ->

  # App error ids
  APP_OPEN_FAILED         : 15000
  SKYPE_OPEN_FAILED       : 15001
  INVALID_LINKEDIN_URL    : 15002
  GOOGLE_SIGNIN_FAILED    : 15003
  INVALID_EMAIL           : 15004
  EMPTY_EMAIL             : 15005
  INVALID_FORM            : 15006
  EMPTY_CONTACT_LIST      : 15007
  START_SCHEDULING_FAILED : 15008
  EMPTY_PHONE_NUMBER      : 15009
  PHONENUMBER_EXISTS      : 15010
  USER_PHONENUMBER        : 15011
  INVALID_SCHEDULING      : 15012
  INVALID_PHONE_NUMBER    : 15013


  # Errors generated by the application itself.
  # Use this method if you want to handle an internal application error.
  # Usage:
  #    @error = @errorHandlerService.handleAppError(15002)
  #
  # Output may be processed from @error with mtn-error directive.
  handleAppError: (errorCode, msg) ->
    switch errorCode
      when @APP_OPEN_FAILED         then return @appOpenFailed()
      when @SKYPE_OPEN_FAILED       then return @appOpenFailed("skype")
      when @INVALID_LINKEDIN_URL    then return @appInvalidLinkedInUrl()
      when @GOOGLE_SIGNIN_FAILED    then return @appGoogleSignInFailed()
      when @INVALID_EMAIL           then return @invalidEmail()
      when @EMPTY_EMAIL             then return @emptyEmail()
      when @INVALID_FORM            then return @invalidForm()
      when @EMPTY_CONTACT_LIST      then return @emptyContactlist()
      when @INVALID_SCHEDULING      then return @invalidScheduling(msg)
      when @START_SCHEDULING_FAILED then return @startSchedulingFailed()
      when @EMPTY_PHONE_NUMBER      then return @emptyPhonenumber()
      when @PHONENUMBER_EXISTS      then return @phonenumberExists()
      when @USER_PHONENUMBER        then return @userPhoneNumber()
      when @INVALID_PHONE_NUMBER    then return @invalidPhoneNumber()

    return @unknown()

  # Generic error handler for any possible failure.
  # Usage:
  #   (failure) ->
  #      @error = errorHandlerService.handle failure
  #
  # Output may be processed from @error with mtn-error directive.
  #
  # If you need to handle an internal application error from the general error
  # handler, pass in a failure object having "mtnAppErrorCode", e.g.
  #    errorHandlerService.handle( { mtnAppErrorCode: 12345 } )
  handle: (failure) ->

    # APP ERRORS
    return handleAppError(failure.mtnAppErrorCode) if failure?.mtnAppErrorCode

    # HTTP ERRORS
    switch failure?.status
      when 0   then return @timeout(failure)
      when 401 then return @authenticate(failure)
      when 404 then return @notFoundOrUnavailable(failure)

    # KNOWN API ERRORS
    switch failure?.error?.code
      when 401 then return @authenticate(failure)
      when 403 then return @accessDenied(failure)

    # BEST GUESS ERRORS
    return @openSettings() if @isCalendarPermissionDenied(failure)
    return @openSettings() if @isContactPermissionDenied(failure)
    return @cancelledUpload() if @isFileTransferAbort(failure)
    return @cancelledPhotoSelect() if @isPhotoSelectAbort(failure)

    return @unknown(failure)



  ####################
  # PRIVATE
  ####################


  ## EXTERNAL ERRORS

  accessDenied: (failure) ->
    $log.warn "[error handler] Access denied error:", failure
    @msg(
      "You don't have the permission to view this content."
      {
        title: "Access denied"
        failure: failure
      }
    )

  # Some 404 errors are caused because current user id is undefined and invalid URL is requested.
  notFoundOrUnavailable: (failure) ->
    if !sessionService.isSignedIn()
      @authenticate()
    else
      @msg(
        "This is either a connectivity issue or you should not be here."
        {
          title: "Not found (404)"
          buttonCaption: "Refresh"
          failure: failure
        }
      )

  unknown: (failure) ->
    $log.warn "[error handler] Unknown error:", failure
    if failure?.error?.message
      if failure.error.message.length > 100
        title: "Unknown error"
        msg = "We know it looks like alien gibberish, so a report was automatically sent to our tech "+
          "guys. Message from server: \n #{failure.error.message}"
      else
        title = "Sorry!"
        msg = failure.error.message

      @msg(
        msg
        {
          title: title
          failure: failure
        }
      )
    else
      @msg(
        "An unknown error occured. A report was automatically sent to our tech guys."
        {
          title: "That's strange!"
          failure: failure
        }
      )

  # User canceled action, no popup required
  cancelledUpload: ->
    null

  # User canceled action, no popup required
  cancelledPhotoSelect: ->
    null

  # Keys "body" and "http_status" exist but their value is null. Abort code is "4" so it is not enough only by itself.
  isFileTransferAbort: (failure) ->
    failure?.hasOwnProperty("body") && failure?.hasOwnProperty("http_status") && failure?.code == FileTransferError.ABORT_ERR

  isPhotoSelectAbort: (failure) ->
    failure == "no image selected" || failure == "Selection cancelled."

  openSettings: ->
    if deviceUtils.platform() == "ios" && deviceUtils.version() >= 8
      window.OpenSettings.open()

  isCalendarPermissionDenied: (failure) ->
    failure == "Access not granted"

  isContactPermissionDenied: (failure) ->
    return false if !ContactError?
    failure?.code == ContactError.PERMISSION_DENIED_ERROR

  # Failure has HTTP Status 0 also when offline.
  timeout: (failure) ->
    $log.warn "[error handler] Request timeout"

    if connectivity.isOffline()
      @msg(
        "Your internet connection seems to be offline."
        {
          category: "connectivity"
          title: "No connection"
          buttonCaption: "Refresh"
          failure: failure
        }
      )
    else
      @msg(
        "It's taking too long to get a response from the server. Please try again."
        {
          title: "Request timed out"
          buttonCaption: "Refresh"
          failure: failure
        }
      )

  authenticate: (failure) ->
    $log.warn "[error handler] API requires authentication."
    sessionService.signOut()

  ## INTERNAL APPLICATION ERRORS

  appOpenFailed: (type) ->
    switch type
      when "skype" then @msg("We are unable to open Skype. Do you have the app installed on this device?", {title: "Skype not available"})
      else @msg("We are unable to open this remote meeting tool. Do you have the required app installed on this device?", { title: "Tool not available" })

  appInvalidLinkedInUrl: ->
    msg = "The LinkedIn profile should be a full web address to your profile starting with \"http://\""
    @msg(msg, { title: "Please notice" } )

  appGoogleSignInFailed: ->
    msg = "For some reason we were not able to sign you in with Google. Please try again."
    @msg(msg, { title: "Sign in failed" } )

  invalidEmail: ->
    msg = "Please enter a valid email address"
    @msg(msg, { title: "Invalid address" } )

  invalidForm: ->
    msg = "There are errors in the form"
    @msg(msg, { title: "Invalid input" } )

  emptyEmail: ->
    msg = "Please enter at least one valid email address"
    @msg(msg, { title: "Invalid address" } )

  emptyContactlist: ->
    msg = "Please add at least one participant to proceed."
    @msg(msg, { title: "Add participants" } )

  invalidScheduling: (msg) ->
    @msg(msg, { title: "Bummer!" } )

  startSchedulingFailed: (msg) ->
    msg = "We couldn't find even one suitable time to suggest. Try adjusting the scheduling rules to allow more possibilities."
    @msg(msg, { title: "Unable to start scheduling" } )

  emptyPhonenumber: ->
    msg = "The selected contact does not have a phone number."
    @msg(msg, { title: "Phone number unavailable" } )

  phonenumberExists: ->
    msg = "This contact has already been added."
    @msg(msg, { title: "Contact already added" } )

  userPhoneNumber: ->
    msg = "We automatically invite you to the meeting you have created."
    @msg(msg, { title: "You're invited" } )

  invalidPhoneNumber: ->
    msg = "This phone number seems invalid. Please check the number and the country code."
    @msg(msg, { title: "Invalid phone number" } )

  ## UTILITY

  msg: (msg, options) ->
    options = options || {}
    category = options.category || null
    title = options.title || "Sorry!"
    buttonCaption = options.buttonCaption || "Ok"
    failure = options.failure || null

    $analytics.eventTrack(
      "Error"
      {
        "Error title": title
        "Error message": msg
        "Error category": category
      }
    )

    if $window.Raven? && $window.appEnvironment.sentry.enabled
      $window.Raven.captureException(
        title + ": " + msg,
        {
          extra: failure
          tags: { category: "Dialog" }
        }

      )

    return {
      message:  msg
      title: title
      buttonCaption: buttonCaption
      isConnectivityIssue: category == "connectivity"
    }
